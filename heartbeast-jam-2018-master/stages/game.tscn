[gd_scene load_steps=12 format=1]

[ext_resource path="res://sprites/board-0.png" type="Texture" id=1]
[ext_resource path="res://scripts/GridVisualizer.gd" type="Script" id=2]
[ext_resource path="res://sprites/Fire_Left.tex" type="Texture" id=3]
[ext_resource path="res://sprites/Fire_Left2.tex" type="Texture" id=4]
[ext_resource path="res://sprites/Fire_Left3.tex" type="Texture" id=5]
[ext_resource path="res://sprites/Fire_Left4.tex" type="Texture" id=6]
[ext_resource path="res://sprites/Under.tex" type="Texture" id=7]
[ext_resource path="res://sprites/Over.tex" type="Texture" id=8]
[ext_resource path="res://UPCJL.fnt" type="BitmapFont" id=9]

[sub_resource type="GDScript" id=1]

script/source = "#extends TileMap
#
#var tile_size = get_cell_size()
#var half_tile_size = tile_size / 2
#
#enum ENTITY_TYPES {PLAYER, OBSTACLE, FOOD}
#
#var grid_size = Vector2(141, 141)
#var grid = []
#
#onready var Obstacle = preload(\"res://scenes/obstacle.tscn\")
#
#func _ready():
#	print(\"This works\")
#	# Initialize grid matrix
#	for x in range(grid_size.x):
#		grid.append([])
#		for y in range(grid_size.y):
#			grid[x].append(null)
#	
#	# Generate enemies
#	var positions = []
#	for n in range(5):
#		var grid_pos = Vector2(randi() % int(grid_size.x), randi() % int(grid_size.y))
#		if not grid_pos in positions:
#			positions.append(grid_pos)
#	print(positions)
#	
#	for pos in positions:
#		var new_obstacle = Obstacle.instance()
#		new_obstacle.set_pos(map_to_world(pos))
#		grid[pos.x][pos.y] = OBSTACLE
#		add_child(new_obstacle)
#		print(\"Obstacle spawned.\")
#
#func is_cell_vacant():
#	pass
#
#func update_child_pos(child, new_pos, direction):
#	pass

# Collection of functions to work with a Grid. Stores all its children in the grid array

extends TileMap

enum ENTITY_TYPES {PLAYER, OBSTACLE, COLLECTIBLE}

var tile_size = get_cell_size()
var half_tile_size = tile_size / 2
var grid_size = Vector2(8, 8)

var grid = []
onready var Obstacle = preload(\"res://scenes/obstacle.tscn\")
onready var Player = preload(\"res://scenes/snake_circle.tscn\")

func _ready():
	randomize()
	for x in range(grid_size.x):
		grid.append([])
		for y in range(grid_size.y):
			grid[x].append(null)

	# Player
	var new_player = Player.instance()
	new_player.set_pos(map_to_world(Vector2(4,4)) + half_tile_size)
	add_child(new_player)

	# Obstacles
	var positions = []
	for x in range(9):
		var placed = false
		while not placed:
			var grid_pos = Vector2(randi() % int(grid_size.x), randi() % int(grid_size.y))
			if not grid[grid_pos.x][grid_pos.y]:
				if not grid_pos in positions:
					positions.append(grid_pos)
					placed = true

	for pos in positions:
		var new_obstacle = Obstacle.instance()
		new_obstacle.set_pos(map_to_world(pos) + half_tile_size)
		grid[pos.x][pos.y] = new_obstacle.get_name()
		add_child(new_obstacle)


func get_cell_content(pos=Vector2()):
	return grid[pos.x][pos.y]


func is_cell_vacant(pos=Vector2(), direction=Vector2()):
	var grid_pos = world_to_map(pos) + direction

	if grid_pos.x < grid_size.x and grid_pos.x >= 0:
		if grid_pos.y < grid_size.y and grid_pos.y >= 0:
			return true if grid[grid_pos.x][grid_pos.y] == null else false
	return false


func update_child_pos(new_pos, direction, type):
	# Remove node from current cell, add it to the new cell, returns the new target move_to position
	var grid_pos = world_to_map(new_pos)
	print(grid_pos)
	grid[grid_pos.x][grid_pos.y] = null
	
	var new_grid_pos = grid_pos + direction
	grid[new_grid_pos.x][new_grid_pos.y] = type
	
	var target_pos = map_to_world(new_grid_pos) + half_tile_size
	return target_pos
"

[sub_resource type="SpriteFrames" id=2]

animations = [ {
"frames": [ ExtResource( 3 ), ExtResource( 4 ), ExtResource( 5 ), ExtResource( 6 ) ],
"loop": true,
"name": "default",
"speed": 3.5
} ]

[node name="game" type="Node"]

[node name="background" type="Sprite" parent="."]

texture = ExtResource( 1 )
centered = false
__meta__ = {
"_edit_lock_": true
}

[node name="grid" type="TileMap" parent="."]

transform/pos = Vector2( 202, 212 )
mode = 0
tile_set = null
cell/size = Vector2( 141, 141 )
cell/quadrant_size = 16
cell/custom_transform = Matrix32( 1, 0, 0, 1, 0, 0 )
cell/half_offset = 2
cell/tile_origin = 0
cell/y_sort = false
collision/use_kinematic = false
collision/friction = 1.0
collision/bounce = 0.0
collision/layers = 1
collision/mask = 1
occluder/light_mask = 1
tile_data = IntArray(  )
script/script = SubResource( 1 )

[node name="grid_visualizer" type="Node2D" parent="grid"]

visibility/visible = false
transform/pos = Vector2( 10, 0 )
script/script = ExtResource( 2 )
__meta__ = {
"_edit_lock_": true
}

[node name="Fire_Right" type="AnimatedSprite" parent="."]

transform/pos = Vector2( 1392.88, 604.331 )
transform/scale = Vector2( 1.74236, 1.18226 )
frames = SubResource( 2 )
animation = "default"
frame = 2
playing = true
flip_h = true

[node name="Fire_Left" type="AnimatedSprite" parent="."]

transform/pos = Vector2( 132.882, 608.331 )
transform/scale = Vector2( 1.74236, 1.18226 )
frames = SubResource( 2 )
animation = "default"
frame = 1
playing = true

[node name="TextureProgress" type="TextureProgress" parent="."]

rect/scale = Vector2( 4, 4 )
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 462.0
margin/top = 74.0
margin/right = 718.0
margin/bottom = 153.0
range/min = 0.0
range/max = 100.0
range/step = 1.0
range/page = 0.0
range/value = 66.0
range/exp_edit = false
range/rounded = false
texture/under = ExtResource( 7 )
texture/over = null
texture/progress = ExtResource( 8 )
radial_fill/fill_degrees = 360.0
radial_fill/center_offset = Vector2( 0, 0 )

[node name="RichTextLabel" type="RichTextLabel" parent="TextureProgress"]

focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 58.0
margin/top = 0.0
margin/right = 506.0
margin/bottom = 140.0
custom_fonts/normal_font = ExtResource( 9 )
bbcode/enabled = true
bbcode/bbcode = "2/3"
visible_characters = -1
percent_visible = 1.0


